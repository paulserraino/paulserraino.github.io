webpackJsonp([0x95b0bac4f589],{344:function(e,a){e.exports={data:{markdownRemark:{html:'<p>The flux dispatcher is not a traditional <a href="/javascript/2016/02/05/event-emitter-mechanics.html">event emitter</a> that we, javascript developers, know and love. The flux dispatcher is meant to broadcast unidirectional messages. Messages, that are emitted by one or more publishers to a single subscriber. This gives rise to some interesting patterns and is a nice solution that decouples UI components from the application stores.</p>\n<p>For the sake of understanding these concepts, i\'m going to call the single subscriber a \'registered callback\'; and let\'s call the messages emitted by the publishers, \'payloads\'.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// ex. registered callback</span>\n<span class="token keyword">const</span> token <span class="token operator">=</span> dispatcher<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>payload <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// handle payload data</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>At a glance, the registered callback may seem completely useless, since using a traditional pub/sub subscriber (via <code>.on</code> method) works perfectly, but using a basic event emitter becomes problematic when modeling application into stores. The data coming in from the server is relational (the majority of the time). So for each update in a relational data store would require updates to cascade from parent dependencies. The flux dispatcher solves this issue with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</a>.</p>\n<p>The flux dispatcher has method called <a href="https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L152"><code>.waitFor</code></a>. This method leverages promises to wait for each parent dispatcher to resolve before invoking the next child registered callback.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code class="language-none">//[dispatch: Update Store 3] -> [Update Store 1] -> [Wait for: Store 1] -> [Wait for: Store 2] -> [Update Store 3]</code></pre>\n      </div>\n<p>The <code>.waitFor(id)</code> method knows the order in which to invoke each registered callback via a dispatcher token.</p>\n<br>\n<br>\nfin.',frontmatter:{date:"February 09, 2016",path:"/flux-dispatcher-primer",title:"Flux Dispatcher Primer"}}},pathContext:{}}}});
//# sourceMappingURL=path---flux-dispatcher-primer-68a8b4a050f03fc3e2fa.js.map