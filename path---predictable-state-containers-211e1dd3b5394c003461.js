webpackJsonp([0x74ede7a90ca8],{347:function(n,s){n.exports={data:{markdownRemark:{html:'<p>I always want to make my blog posts more entertaining. Should I be more funny? Should I be clever? Should I be cool? I\'m not cool. I\'m just going to keep this post short and to the point.</p>\n<h3>What is a predictable state container?</h3>\n<p>Predictable state containers are made up of two things: an observable and a reducer. The observable is the container itself and the reducer manages state. State changes within the observable are predictable because all state transformations are made by applying the old state and an action to a pure function (i.e the reducer).</p>\n<p>Here\'s an example of a predictable state container, in just a few lines of code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Observable</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> currentState <span class="token operator">=</span> initialState\n    <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">let</span> <span class="token function-variable function">subscribe</span> <span class="token operator">=</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">=></span> listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        currentState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n\n        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=></span> <span class="token function">listener</span><span class="token punctuation">(</span>currentState<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> subscribe<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>A seasoned javascript developer might recognise this observable, it\'s <a href="https://github.com/reactjs/redux">redux</a>! And an even more seasoned developer might recognise a paradigm, it\'s reactive programming.</p>\n<blockquote>\n<p>There\'s always more than one solution to a given problem. What if redux didn\'t exist? How would you build an observable state container?</p>\n</blockquote>\n<p>I\'m not going to go into the details of defining reactive programming in this blog post, instead I want to borrow the core principles of Redux (a single source of truth, read-only state and changes made with pure function), and look for different ways to build predictable state containers.</p>\n<p>Let\'s go back to what a state container is made up of (an observable and a reducer) and approach the problem from two extremes, using some popular libraries.</p>\n<h3>Building a state container using RxJs</h3>\n<p><a href="http://reactivex.io">RxJs</a> is everything you could possible want out of observables. It\'s set of libraries for composing observable sequences (sometimes referred to as "data streams"). The source of the data stream is event based. It could be: a click event, an ajax requests, an update to a data store, etc.</p>\n<p>Let\'s take a look at how we would build a predictable state container using RxJs. In the example below we\'re building a counter.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Rx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'rx\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// First we define a "subject", this will act as our</span>\n<span class="token comment">// store\'s dispatcher. A subject is an object that is</span>\n<span class="token comment">// both an observable sequence as well as an observer.</span>\n\n<span class="token keyword">var</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rx<span class="token punctuation">.</span>Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Next we define our actions, by filtering the data streams</span>\n<span class="token comment">// by actions.type than we map the action to a pure function.</span>\n\n<span class="token keyword">var</span> incReducer <span class="token operator">=</span> subject\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'INC\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=></span> s <span class="token operator">=></span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> decReducer <span class="token operator">=</span> subject\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'DEC\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=></span> s <span class="token operator">=></span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Next, we define our store\'s initial state.</span>\n<span class="token keyword">var</span> initialState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Lastly, we compose our actions (i.e observable sequences) into</span>\n<span class="token comment">// a single observable (the data store)</span>\n\n<span class="token keyword">var</span> store <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable\n    <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>incReducer<span class="token punctuation">,</span> decReducer<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nstore<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// When we call `onNext` the subject will return a pure function</span>\n<span class="token comment">// associated with the action.type, and the store will use that</span>\n<span class="token comment">// pure function to reduce the current state by calling `scan`(a derivative of `reduce`).</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'INC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 1</span>\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'INC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 2</span>\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'DEC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 1</span>\n</code></pre>\n      </div>\n<h3>Building a state container using Ramda</h3>\n<p><a href="http://ramdajs.com">Ramda</a> is everything you could want out of functional programming. Functions in Ramda are automatically curried and it has an emphasises on a purer functional style of programming.</p>\n<p>I think it would be interesting to use transducers to build abstract actions for our data store.</p>\n<p>A transducer is function that accepts a reducer and returns a reducer (i.e a pure function).</p>\n<p>So let\'s do this!</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> R <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ramda\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> reduceReducers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'reduce-reducers\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> Container <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./ramda-container\'</span><span class="token punctuation">)</span> <span class="token comment">// see github source</span>\n\n<span class="token comment">// First, we define our actions.</span>\n<span class="token comment">// actions will have the following api:</span>\n<span class="token comment">// f(state, actions) they\'re reducers!</span>\n\n<span class="token keyword">var</span> increment <span class="token operator">=</span> <span class="token function">transduce</span><span class="token punctuation">(</span>\n    R<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'INC\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    R<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> decrement <span class="token operator">=</span> <span class="token function">transduce</span><span class="token punctuation">(</span>\n    R<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'DEC\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    R<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>subtract<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// Next, we combine our actions into a single reducer</span>\n\n<span class="token keyword">var</span> rootReducer <span class="token operator">=</span> <span class="token function">reduceReducers</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> decrement<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> subject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">initialState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reducer</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// When we call `onNext` the action is applied to the root reducer</span>\n<span class="token comment">// to update the store\'s state.</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'INC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 1</span>\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'INC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 2</span>\nsubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'DEC\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// => 1</span>\n</code></pre>\n      </div>\n<h4>Source Code</h4>\n<p><a href="https://github.com/paulserraino/state-containers">https://github.com/paulserraino/state-containers</a></p>',frontmatter:{date:"April 21, 2016",path:"/predictable-state-containers",title:"Building Predictable State Containers"}}},pathContext:{}}}});
//# sourceMappingURL=path---predictable-state-containers-211e1dd3b5394c003461.js.map