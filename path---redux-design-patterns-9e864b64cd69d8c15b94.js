webpackJsonp([82002069076619],{350:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Î»</h1>\n<h3>Reduce Procedure</h3>\n<p>The <code>reduce</code> function is an extremely powerful tool that is used to build new data sets from existing collections of data.</p>\n<p>The <code>reduce</code> function is a <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher-order function</a> that accepts at least two arguments: a <a href="https://en.wikipedia.org/wiki/Pure_function">pure function</a> and an initial state (of any data type). The pure function is evaluated recursively with the current list item and the previous state applied as arguments.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> initialState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 15</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// the reduce method with apply arguments to this method as follows:</span>\n    <span class="token comment">// `a` the previous state</span>\n    <span class="token comment">// `b` the current item in the list</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// when `.reduce` is called `add` is recursively evaluated as follows:</span>\n<span class="token comment">// add(0, 1)  => 1</span>\n<span class="token comment">// add(1, 2)  => 3</span>\n<span class="token comment">// add(3, 3)  => 6</span>\n<span class="token comment">// add(6, 4)  => 10</span>\n<span class="token comment">// add(10, 5) => 15</span>\n</code></pre>\n      </div>\n<p>Redux uses the reduce pattern to create manageable state containers for application stores. Notice, that in the above example, that each time <code>add</code> is evaluated it returns the current state of the recursive process. In Redux, the <code>add</code> method would be referred as a "reducer" and the elements of the list could be thought of as actions; and the state could be thought of as the state of the application. The biggest difference is that in Redux, we don\'t process lists of actions, actions are "dispatched". Each time an action is dispatched the reducer (a pure function) is evaluated with the current state and the action object as arguments.  </p>\n<h3>Composite Functions</h3>\n<p>Functional composition is a way mapping the results of one function to the arguments of another. This is a useful tool, as it allows us create new abstractions by combining other abstractions. Composite functions are used in Redux to create middleware.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => 36</span>\n</code></pre>\n      </div>\n<h2>Implementing Redux</h2>\n<p>Using our knowledge of <code>reduce</code> and functional composition lets try to implemented some the methods found in Redux from scratch.</p>\n<h3>createStore</h3>\n<p>The store is the heart of Redux. Redux stores are made up of the following:</p>\n<ul>\n<li>the state of the application</li>\n<li>dispatch method, used to dispatch actions to the store</li>\n<li>listener method, used to listen for state changes</li>\n<li>reducer, a pure function used to change the state of store based on an action</li>\n<li>getState method, which returns the current state of the store</li>\n</ul>\n<p>While the store is made of many things, its implementation is quite simple and can be written in 20 or 30 lines of code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> state\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// The redux store interface is similar to the flux dispatcher</span>\n    <span class="token comment">// in that the flow of data is unidirectional, but unlike the</span>\n    <span class="token comment">// flux dispatcher, the Redux store is not an event-emitter it\'s</span>\n    <span class="token comment">// an observable object.</span>\n\n    <span class="token comment">// So unlike in the flux dispatcher, where we use a key/value map to</span>\n    <span class="token comment">// to manage dispatcher tokens and registered callbacks, the Redux</span>\n    <span class="token comment">// `subscribe` method simply uses an array, `listeners`, to store</span>\n    <span class="token comment">// callbacks. No tokens, no maps.</span>\n\n    <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n\n        <span class="token comment">// The `unsubscribe` method will remove the listener from the</span>\n        <span class="token comment">// `listeners` array.</span>\n\n        <span class="token keyword">return</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n            listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// The `dispatch` method is used invoke actions on store and depending</span>\n    <span class="token comment">// on the type of the action the store\'s state will change.</span>\n\n    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// Here the reducer function is call to get the new state of the</span>\n        <span class="token comment">// store. Remember the reducer is pure function, meaning it does</span>\n        <span class="token comment">// not augment its parent scope. The reducer function returns a</span>\n        <span class="token comment">// new state object and that object is assigned to the current</span>\n        <span class="token comment">// state of the store.</span>\n\n        state <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n\n        <span class="token comment">// Each time the `dispatch` method is called every listener is the</span>\n        <span class="token comment">// `listeners` array is invoked.</span>\n\n        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=></span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Here we call the dispatch method with an empty object to initialize</span>\n    <span class="token comment">// the state of the store.</span>\n\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// lastly we expose the API</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> subscribe<span class="token punctuation">,</span> getState <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>combineReducers</h3>\n<p>As we have seen in the example above, the entire state of the application is determined by a reducer function that accepts two arguments: the current state and an action. Actions, tell the reducer how the application\'s state should change and the reducer function returns the new state.</p>\n<p>Using a single reducer works for most trivial applications but it doesn\'t scale. As the application\'s state tree grows, it becomes more difficult for the reducer to make state changes. The solution to this problem is to implement child reducers. This solution not works well for Redux, but implementing single minded functions is a good practice when working with complex datasets. So lets take at look at how to implement child reducers with Redux\'s <code>combineReducers</code> function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Let\'s say our application state looks something like this:</span>\n\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// and instead having a single reducer manage state changes for `foo` and `bar`,</span>\n<span class="token comment">// we want to use child reducers to manage individual parts of the state tree.</span>\n\n<span class="token comment">// We can do this by using the `combineReducers` function.</span>\n\n<span class="token keyword">const</span> appReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> fooReducer<span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> barReducer  \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>The <code>combineReducers</code> function accepts one argument, a key/value map. The key is the state field. The value is the child reducer. <code>combineReducers</code> maps the child reducer to the state field and returns a new reducer.</p>\n<p>How does it work?</p>\n<p>The implementation of <code>combineReducers</code> is quite simple and can be written is a few lines of code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> newReducer<span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">newReducer</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// Here we get the list of keys from the reducers key/value map</span>\n        <span class="token comment">// and we call the `reduce` function that we talked about earlier.</span>\n\n        <span class="token comment">// We call the `reduce` function with the initial state as empty</span>\n        <span class="token comment">// object, `{}`.</span>\n\n        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nextstate<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n            <span class="token comment">// We call the child reducer for a give key and the child</span>\n            <span class="token comment">// reducer should return the next state for the given key.</span>\n\n            nextState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> reducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n\n            <span class="token comment">// Finally we return the new state.</span>\n\n            <span class="token keyword">return</span> nextState\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>applyMiddleware</h3>\n<p>The middleware layer in Redux leverages <a href="#composite-functions">function composition</a>, that we discussed earlier.</p>\n<p>So lets implement a <code>compose</code> helper function that will allow us to easily preform function composition.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// compose(f, g, h) is the same as f(g(h(x)))</span>\n\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>funcs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> lastFn <span class="token operator">=</span> funcs<span class="token punctuation">[</span>funcs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> fns <span class="token operator">=</span> funcs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n        <span class="token comment">// We initialize the state of `reduceRight` with the return value of</span>\n        <span class="token comment">// the last function. The results of the previous function are than</span>\n        <span class="token comment">// passed as arguments to the next.</span>\n\n        <span class="token keyword">return</span> fns<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lastFn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now that we have a convenient way of composing functions, we can start to write the middleware layer for our Redux implementation.</p>\n<p>We\'re going to implement the <code>applyMiddleware</code> function. This function will create middleware that "sits" between the store\'s <code>dispatch</code> method its action handler (a.k.a the reducer). So the data flow will look something like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code class="language-none">// [Dispatch action] --> [Middleware functions] --> [Store\'s reducer]</code></pre>\n      </div>\n<p>So let\'s build it!</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Our `applyMiddleware` function will accept n functions as arguments and wraps the</span>\n<span class="token comment">// Redux `createStore` method.</span>\n\n<span class="token comment">// ex. applyMiddleware(f, g, h)(createStore)</span>\n\n<span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>createStore<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// we need to create a Redux store</span>\n        <span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span>\n        <span class="token keyword">var</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch\n\n        <span class="token comment">// setup the middleware api</span>\n        <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token punctuation">{</span>\n            getState<span class="token punctuation">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>\n            dispatch<span class="token punctuation">:</span> dispatch\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// we get a list of middleware functions</span>\n\n        <span class="token keyword">var</span> chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">middleware</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n        <span class="token comment">// we compose those functions and wrap the store\'s `dispatch` method</span>\n\n        dispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>\n\n        <span class="token comment">// Finally, we return the store\'s interface with the new `dispatch` method</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token operator">...</span>store<span class="token punctuation">,</span>\n            dispatch\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Resources</h2>\n<ul>\n<li><a href="https://github.com/paulserraino/mini-redux">mini-redux</a></li>\n<li><a href="https://github.com/reactjs/redux/tree/master/src">redux source</a></li>\n</ul>',frontmatter:{date:"February 16, 2016",path:"/redux-design-patterns",title:"Redux Design Patterns"}}},pathContext:{}}}});
//# sourceMappingURL=path---redux-design-patterns-9e864b64cd69d8c15b94.js.map