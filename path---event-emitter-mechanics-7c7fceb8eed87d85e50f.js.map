{"version":3,"sources":["webpack:///path---event-emitter-mechanics-7c7fceb8eed87d85e50f.js","webpack:///./.cache/json/event-emitter-mechanics.json"],"names":["webpackJsonp","343","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,w/SAAylSC,aAA6uBC,KAAA,oBAAAC,KAAA,2BAAAC,MAAA,6BAAiGC","file":"path---event-emitter-mechanics-7c7fceb8eed87d85e50f.js","sourcesContent":["webpackJsonp([60119001723219],{\n\n/***/ 343:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hacking is about taking things apart, figuring out how something works and using that knowledge to build something new and useful. In this blog post, I want to hack event emitters, as they're an essential messaging pattern to understanding javascript programming.</p>\\n<p>Event emitters are implementations of the publish-subscribe architecture, a messaging pattern where emitters (or publishers) emit event (that are usually key value pairs) to a subscriber.</p>\\n<p>The event emitter can have many subscriber listening to same event, but each subscriber may be performing a different task based on it's unique context. This what makes event emitters so powerful. They allow developers to write code that is loosely coupled with minimal dependencies.</p>\\n<p>So how do they work?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">EventEmitter</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nEventEmitter<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">emit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// convert arguments object to an array</span>\\n    <span class=\\\"token keyword\\\">var</span> args <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// get the event name</span>\\n    <span class=\\\"token keyword\\\">var</span> event <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// apply args to the event's handler</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>event <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">[</span>event<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nEventEmitter<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">on</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> handler<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">[</span>event<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> handler<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Well, based on the example above each instance of the <code>EventEmitter</code> class is going in initialize a key value map, <code>this.handlers</code>. In the example i'm using a javascript object but one could imagine a more complex event emitter using a sophisticated hash table or a key value database like redis.</p>\\n<p>The <code>EventEmitter</code> class has two methods <code>emit</code> and <code>on</code>. The <code>on</code> method registers the subscriber by an event name (which is usually a string) and an event handler. The subscriber's event name/handler pair are added as key value pairs to the handler store, <code>this.handlers</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">emitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'eventname'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// [ Subscriber Handler ] -----> [ Handler Store ]</span>\\n</code></pre>\\n      </div>\\n<p>The <code>emit</code> method reads from the handler store and if an event is found, it applies the <code>message</code> arguments to the handler methods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">emitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'eventname'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'message'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// [ Handler Store ] -----> [ Handler Method ]</span>\\n</code></pre>\\n      </div>\\n<p>The above example, while functional, is lacking in good features (also it's poorly implemented since it only allow for one handler per event). It mainly serves as a jumping off point for hacking your own custom event emitter.</p>\\n<h4>Good API Features <span style=\\\"font-size: 16px;\\\">[1]</span></h4>\\n<ul>\\n<li>\\\"*\\\", for listening on any event</li>\\n<li>inheritance, for bubbling events</li>\\n<li>queueing, for processing large numbers of events concurrently</li>\\n<li>caching, for optimizing performance</li>\\n</ul>\\n<h4>Exercise</h4>\\n<p>Implement an event emitter that can execute multiple handlers, so that the following code runs as expected.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> ee <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EventEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello '</span> <span class=\\\"token operator\\\">+</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hi '</span> <span class=\\\"token operator\\\">+</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// In the console you should see:</span>\\n<span class=\\\"token comment\\\">// > hello world</span>\\n<span class=\\\"token comment\\\">// > hi world</span>\\n</code></pre>\\n      </div>\\n<h3>Resources</h3>\\n<ul>\\n<li><a href=\\\"\\\">1</a>(<a href=\\\"https://www.youtube.com/watch?v=EbdBDR-ZUTA\\\">https://www.youtube.com/watch?v=EbdBDR-ZUTA</a>)</li>\\n</ul>\",\"frontmatter\":{\"date\":\"February 05, 2016\",\"path\":\"/event-emitter-mechanics\",\"title\":\"Event Emitter Mechanics\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---event-emitter-mechanics-7c7fceb8eed87d85e50f.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hacking is about taking things apart, figuring out how something works and using that knowledge to build something new and useful. In this blog post, I want to hack event emitters, as they're an essential messaging pattern to understanding javascript programming.</p>\\n<p>Event emitters are implementations of the publish-subscribe architecture, a messaging pattern where emitters (or publishers) emit event (that are usually key value pairs) to a subscriber.</p>\\n<p>The event emitter can have many subscriber listening to same event, but each subscriber may be performing a different task based on it's unique context. This what makes event emitters so powerful. They allow developers to write code that is loosely coupled with minimal dependencies.</p>\\n<p>So how do they work?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">EventEmitter</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nEventEmitter<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">emit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// convert arguments object to an array</span>\\n    <span class=\\\"token keyword\\\">var</span> args <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// get the event name</span>\\n    <span class=\\\"token keyword\\\">var</span> event <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// apply args to the event's handler</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>event <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">[</span>event<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nEventEmitter<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">on</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> handler<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlers<span class=\\\"token punctuation\\\">[</span>event<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> handler<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Well, based on the example above each instance of the <code>EventEmitter</code> class is going in initialize a key value map, <code>this.handlers</code>. In the example i'm using a javascript object but one could imagine a more complex event emitter using a sophisticated hash table or a key value database like redis.</p>\\n<p>The <code>EventEmitter</code> class has two methods <code>emit</code> and <code>on</code>. The <code>on</code> method registers the subscriber by an event name (which is usually a string) and an event handler. The subscriber's event name/handler pair are added as key value pairs to the handler store, <code>this.handlers</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">emitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'eventname'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// [ Subscriber Handler ] -----> [ Handler Store ]</span>\\n</code></pre>\\n      </div>\\n<p>The <code>emit</code> method reads from the handler store and if an event is found, it applies the <code>message</code> arguments to the handler methods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">emitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'eventname'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'message'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// [ Handler Store ] -----> [ Handler Method ]</span>\\n</code></pre>\\n      </div>\\n<p>The above example, while functional, is lacking in good features (also it's poorly implemented since it only allow for one handler per event). It mainly serves as a jumping off point for hacking your own custom event emitter.</p>\\n<h4>Good API Features <span style=\\\"font-size: 16px;\\\">[1]</span></h4>\\n<ul>\\n<li>\\\"*\\\", for listening on any event</li>\\n<li>inheritance, for bubbling events</li>\\n<li>queueing, for processing large numbers of events concurrently</li>\\n<li>caching, for optimizing performance</li>\\n</ul>\\n<h4>Exercise</h4>\\n<p>Implement an event emitter that can execute multiple handlers, so that the following code runs as expected.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> ee <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EventEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello '</span> <span class=\\\"token operator\\\">+</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hi '</span> <span class=\\\"token operator\\\">+</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nee<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'greeting'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// In the console you should see:</span>\\n<span class=\\\"token comment\\\">// > hello world</span>\\n<span class=\\\"token comment\\\">// > hi world</span>\\n</code></pre>\\n      </div>\\n<h3>Resources</h3>\\n<ul>\\n<li><a href=\\\"\\\">1</a>(<a href=\\\"https://www.youtube.com/watch?v=EbdBDR-ZUTA\\\">https://www.youtube.com/watch?v=EbdBDR-ZUTA</a>)</li>\\n</ul>\",\"frontmatter\":{\"date\":\"February 05, 2016\",\"path\":\"/event-emitter-mechanics\",\"title\":\"Event Emitter Mechanics\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/event-emitter-mechanics.json\n// module id = 343\n// module chunks = 60119001723219"],"sourceRoot":""}